/**
 * Http Status Message type file.
 */

'use strict';

import HttpStatusCode from './http.status.code';

const HttpStatusMessage: Record<HttpStatusCode, string> = {
	[HttpStatusCode.Continue]: `Continue`,
	[HttpStatusCode.SwitchingProtocols]: `Switching Protocols`,
	[HttpStatusCode.Processing]: `Processing`,
	[HttpStatusCode.OK]: `Ok`,
	[HttpStatusCode.Created]: `Created`,
	[HttpStatusCode.Accepted]: `Accepted`,
	[HttpStatusCode.NonAuthoritativeInformation]: `Non-authoritative Information`,
	[HttpStatusCode.NoContent]: `No Content`,
	[HttpStatusCode.ResetContent]: `Reset Content`,
	[HttpStatusCode.PartialContent]: `Partial Content`,
	[HttpStatusCode.MultiStatus]: `Multi-Status`,
	[HttpStatusCode.AlreadyReported]: `Already Reported`,
	[HttpStatusCode.IMUsed]: `Im Used`,
	[HttpStatusCode.MultipleChoices]: `Multiple Choices`,
	[HttpStatusCode.MovedPermanently]: `Moved Permanently`,
	[HttpStatusCode.Found]: `Found`,
	[HttpStatusCode.SeeOther]: `See Other`,
	[HttpStatusCode.NotModified]: `Not Modified`,
	[HttpStatusCode.UseProxy]: `Use Proxy`,
	[HttpStatusCode.TemporaryRedirect]: `Temporary Redirect`,
	[HttpStatusCode.PermanentRedirect]: `Permanent Redirect`,
	[HttpStatusCode.BadRequest]: `Bad Request`,
	[HttpStatusCode.Unauthorized]: `Unauthorized`,
	[HttpStatusCode.PaymentRequired]: `Payment Required`,
	[HttpStatusCode.Forbidden]: `Forbidden`,
	[HttpStatusCode.NotFound]: `Not Found`,
	[HttpStatusCode.MethodNotAllowed]: `Method Not Allowed`,
	[HttpStatusCode.NotAcceptable]: `Not Acceptable`,
	[HttpStatusCode.ProxyAuthenticationRequired]: `Proxy Authentication Required`,
	[HttpStatusCode.RequestTimeout]: `Request Timeout`,
	[HttpStatusCode.Conflict]: `Conflict`,
	[HttpStatusCode.Gone]: `Gone`,
	[HttpStatusCode.LengthRequired]: `Length Required`,
	[HttpStatusCode.PreconditionFailed]: `Precondition Failed`,
	[HttpStatusCode.PayloadTooLarge]: `Payload Too Large`,
	[HttpStatusCode.RequestURITooLong]: `Request URI Too Long`,
	[HttpStatusCode.UnsupportedMediaType]: `Unsupported Media Type`,
	[HttpStatusCode.RequestedRangeNotSatisfiable]: `Requested Range Not Satisfiable`,
	[HttpStatusCode.ExpectationFailed]: `Expectation Failed`,
	[HttpStatusCode.ImATeapot]: `I'm A Teapot`,
	[HttpStatusCode.MisdirectedRequest]: `Misdirected Request`,
	[HttpStatusCode.UnprocessableEntity]: `Unprocessable Entity`,
	[HttpStatusCode.Locked]: `Locked`,
	[HttpStatusCode.FailedDependency]: `Failed Dependency`,
	[HttpStatusCode.UpgradeRequired]: `Upgrade Required`,
	[HttpStatusCode.PreconditionRequired]: `Precondition Required`,
	[HttpStatusCode.TooManyRequests]: `Too Many Requests`,
	[HttpStatusCode.RequestHeaderFieldsTooLarge]: `Request Header Fields Too Large`,
	[HttpStatusCode.ConnectionClosedWithoutResponse]: `Connection Closed Without Response`,
	[HttpStatusCode.UnavailableForLegalReasons]: `Unavailable For Legal Reasons`,
	[HttpStatusCode.ClientClosedRequest]: `Client Closed Request`,
	[HttpStatusCode.InternalServerError]: `Internal Server Error`,
	[HttpStatusCode.NotImplemented]: `Not Implemented`,
	[HttpStatusCode.BadGateway]: `Bad Gateway`,
	[HttpStatusCode.ServiceUnavailable]: `Service Unavailable`,
	[HttpStatusCode.GatewayTimeout]: `Gateway Timeout`,
	[HttpStatusCode.HTTPVersionNotSupported]: `HTTP Version Not Supported`,
	[HttpStatusCode.VariantAlsoNegotiates]: `Variant Also Negotiates`,
	[HttpStatusCode.InsufficientStorage]: `Insufficient Storage`,
	[HttpStatusCode.LoopDetected]: `Loop Detected`,
	[HttpStatusCode.NotExtended]: `Not Extended`,
	[HttpStatusCode.NetworkAuthenticationRequired]: `Network Authentication Required`,
	[HttpStatusCode.NetworkConnectTimeoutError]: `Network Connect Timeout Error`,
};

export default HttpStatusMessage;
