/**
 * Http Status Message type file.
 */

import HttpStatus from './http.status';

const HttpStatusMessage: Record<HttpStatus, string> = {
	[HttpStatus.Continue]: `Continue`,
	[HttpStatus.SwitchingProtocols]: `Switching Protocols`,
	[HttpStatus.Processing]: `Processing`,
	[HttpStatus.OK]: `Ok`,
	[HttpStatus.Created]: `Created`,
	[HttpStatus.Accepted]: `Accepted`,
	[HttpStatus.NonAuthoritativeInformation]: `Non-authoritative Information`,
	[HttpStatus.NoContent]: `No Content`,
	[HttpStatus.ResetContent]: `Reset Content`,
	[HttpStatus.PartialContent]: `Partial Content`,
	[HttpStatus.MultiStatus]: `Multi-Status`,
	[HttpStatus.AlreadyReported]: `Already Reported`,
	[HttpStatus.IMUsed]: `Im Used`,
	[HttpStatus.MultipleChoices]: `Multiple Choices`,
	[HttpStatus.MovedPermanently]: `Moved Permanently`,
	[HttpStatus.Found]: `Found`,
	[HttpStatus.SeeOther]: `See Other`,
	[HttpStatus.NotModified]: `Not Modified`,
	[HttpStatus.UseProxy]: `Use Proxy`,
	[HttpStatus.TemporaryRedirect]: `Temporary Redirect`,
	[HttpStatus.PermanentRedirect]: `Permanent Redirect`,
	[HttpStatus.BadRequest]: `Bad Request`,
	[HttpStatus.Unauthorized]: `Unauthorized`,
	[HttpStatus.PaymentRequired]: `Payment Required`,
	[HttpStatus.Forbidden]: `Forbidden`,
	[HttpStatus.NotFound]: `Not Found`,
	[HttpStatus.MethodNotAllowed]: `Method Not Allowed`,
	[HttpStatus.NotAcceptable]: `Not Acceptable`,
	[HttpStatus.ProxyAuthenticationRequired]: `Proxy Authentication Required`,
	[HttpStatus.RequestTimeout]: `Request Timeout`,
	[HttpStatus.Conflict]: `Conflict`,
	[HttpStatus.Gone]: `Gone`,
	[HttpStatus.LengthRequired]: `Length Required`,
	[HttpStatus.PreconditionFailed]: `Precondition Failed`,
	[HttpStatus.PayloadTooLarge]: `Payload Too Large`,
	[HttpStatus.RequestURITooLong]: `Request URI Too Long`,
	[HttpStatus.UnsupportedMediaType]: `Unsupported Media Type`,
	[HttpStatus.RequestedRangeNotSatisfiable]: `Requested Range Not Satisfiable`,
	[HttpStatus.ExpectationFailed]: `Expectation Failed`,
	[HttpStatus.ImATeapot]: `I'm A Teapot`,
	[HttpStatus.MisdirectedRequest]: `Misdirected Request`,
	[HttpStatus.UnprocessableEntity]: `Unprocessable Entity`,
	[HttpStatus.Locked]: `Locked`,
	[HttpStatus.FailedDependency]: `Failed Dependency`,
	[HttpStatus.UpgradeRequired]: `Upgrade Required`,
	[HttpStatus.PreconditionRequired]: `Precondition Required`,
	[HttpStatus.TooManyRequests]: `Too Many Requests`,
	[HttpStatus.RequestHeaderFieldsTooLarge]: `Request Header Fields Too Large`,
	[HttpStatus.ConnectionClosedWithoutResponse]: `Connection Closed Without Response`,
	[HttpStatus.UnavailableForLegalReasons]: `Unavailable For Legal Reasons`,
	[HttpStatus.ClientClosedRequest]: `Client Closed Request`,
	[HttpStatus.InternalServerError]: `Internal Server Error`,
	[HttpStatus.NotImplemented]: `Not Implemented`,
	[HttpStatus.BadGateway]: `Bad Gateway`,
	[HttpStatus.ServiceUnavailable]: `Service Unavailable`,
	[HttpStatus.GatewayTimeout]: `Gateway Timeout`,
	[HttpStatus.HTTPVersionNotSupported]: `HTTP Version Not Supported`,
	[HttpStatus.VariantAlsoNegotiates]: `Variant Also Negotiates`,
	[HttpStatus.InsufficientStorage]: `Insufficient Storage`,
	[HttpStatus.LoopDetected]: `Loop Detected`,
	[HttpStatus.NotExtended]: `Not Extended`,
	[HttpStatus.NetworkAuthenticationRequired]: `Network Authentication Required`,
	[HttpStatus.NetworkConnectTimeoutError]: `Network Connect Timeout Error`,
};

export default HttpStatusMessage;
